{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\afora\\\\Desktop\\\\Projects\\\\MovieDB\\\\src\\\\components\\\\Movie\\\\Movie.js\";\nimport React, { Component } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nimport Navigation from \"../elements/Navigation/Navigation\";\nimport MovieInfo from \"../elements/MovieInfo/MovieInfo\";\nimport MovieInfoBar from \"../elements/MovieInfoBar/MovieInfoBar\";\nimport FourColGrid from \"../elements/FourColGrid/FourColGrid\";\nimport Actor from \"../elements/Actor/Actor\";\nimport Spinner from \"../elements/Spinner/Spinner\";\nimport \"./Movie.css\";\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        console.log(result);\n\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            //..then fetch actors in the setState callback function\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              });\n            });\n          });\n        }\n      }).catch(error => console.error(\"Error:\", error));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    }); //First fetch the movie...\n\n    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n    this.fetchItems(endpoint);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["C:/Users/afora/Desktop/Projects/MovieDB/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","console","log","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","catch","error","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBT,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC5BU,KAD4B,GACpB;AACNC,MAAAA,KAAK,EAAE,IADD;AAENC,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,SAAS,EAAE,EAHL;AAINC,MAAAA,OAAO,EAAE;AAJH,KADoB;;AAAA,SAe5BC,UAf4B,GAefC,QAAQ,IAAI;AACvBC,MAAAA,KAAK,CAACD,QAAD,CAAL,CACGE,IADH,CACQC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADlB,EAEGF,IAFH,CAEQC,MAAM,IAAI;AACdE,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;;AACA,YAAIA,MAAM,CAACI,WAAX,EAAwB;AACtB,eAAKC,QAAL,CAAc;AAAEV,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD,SAFD,MAEO;AACL,eAAKU,QAAL,CAAc;AAAEb,YAAAA,KAAK,EAAEQ;AAAT,WAAd,EAAiC,MAAM;AACrC;AACA,kBAAMH,QAAQ,GAAI,GAAEf,OAAQ,SAAQ,KAAKwB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,OAAQ,oBAAmB1B,OAAQ,EAA/F;AACAe,YAAAA,KAAK,CAACD,QAAD,CAAL,CACGE,IADH,CACQC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADlB,EAEGF,IAFH,CAEQC,MAAM,IAAI;AACd,oBAAMN,SAAS,GAAGM,MAAM,CAACU,IAAP,CAAYC,MAAZ,CAChBC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADT,CAAlB;AAGA,mBAAKR,QAAL,CAAc;AACZZ,gBAAAA,MAAM,EAAEO,MAAM,CAACc,IADH;AAEZpB,gBAAAA,SAFY;AAGZC,gBAAAA,OAAO,EAAE;AAHG,eAAd;AAKD,aAXH;AAYD,WAfD;AAgBD;AACF,OAxBH,EAyBGoB,KAzBH,CAyBSC,KAAK,IAAId,OAAO,CAACc,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAzBlB;AA0BD,KA1C2B;AAAA;;AAQ5BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKZ,QAAL,CAAc;AAAEV,MAAAA,OAAO,EAAE;AAAX,KAAd,EADkB,CAElB;;AACA,UAAME,QAAQ,GAAI,GAAEf,OAAQ,SAAQ,KAAKwB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,OAAQ,YAAW1B,OAAQ,iBAAvF;AACA,SAAKa,UAAL,CAAgBC,QAAhB;AACD;;AA+BDqB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAQD;;AArD2B;;AAwD9B,eAAe5B,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { API_URL, API_KEY } from \"../../config\";\r\nimport Navigation from \"../elements/Navigation/Navigation\";\r\nimport MovieInfo from \"../elements/MovieInfo/MovieInfo\";\r\nimport MovieInfoBar from \"../elements/MovieInfoBar/MovieInfoBar\";\r\nimport FourColGrid from \"../elements/FourColGrid/FourColGrid\";\r\nimport Actor from \"../elements/Actor/Actor\";\r\nimport Spinner from \"../elements/Spinner/Spinner\";\r\nimport \"./Movie.css\";\r\n\r\nclass Movie extends Component {\r\n  state = {\r\n    movie: null,\r\n    actors: null,\r\n    directors: [],\r\n    loading: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ loading: true });\r\n    //First fetch the movie...\r\n    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\r\n    this.fetchItems(endpoint);\r\n  }\r\n\r\n  fetchItems = endpoint => {\r\n    fetch(endpoint)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        console.log(result);\r\n        if (result.status_code) {\r\n          this.setState({ loading: false });\r\n        } else {\r\n          this.setState({ movie: result }, () => {\r\n            //..then fetch actors in the setState callback function\r\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\r\n            fetch(endpoint)\r\n              .then(result => result.json())\r\n              .then(result => {\r\n                const directors = result.crew.filter(\r\n                  member => member.job === \"Director\"\r\n                );\r\n                this.setState({\r\n                  actors: result.cast,\r\n                  directors,\r\n                  loading: false\r\n                });\r\n              });\r\n          });\r\n        }\r\n      })\r\n      .catch(error => console.error(\"Error:\", error));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"rmdb-movie\">\r\n        <Navigation />\r\n        <MovieInfo />\r\n        <MovieInfoBar />\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movie;\r\n"]},"metadata":{},"sourceType":"module"}